---
#
# Bootstrap the cell by creating the first user and the root volumes
# with -localauth.  Creating the root.afs volume here allow the first
# client to start without the -dynroot option enabled.
#
# The mounting of the root.cell volume and the setup of the ACLs
# of the top directories are deferred, since those currently require
# a client.
#

- name: Wait for database quorum
  become: yes
  openafs_contrib.openafs.openafs_wait_for_quorum:
    sleep: 10
    timeout: 600
  when:
    - afs_is_dbserver

- name: "Fileserver cold start"
  become: yes
  command:
    cmd: "{{ afs_bos }} start -server localhost -instance {{ afs_fileserver_type }} -localauth"
  when:
    - afs_is_fileserver
    - afs_server_cold_start
  changed_when: True

- name: Wait for fileserver registration
  become: yes
  openafs_contrib.openafs.openafs_wait_for_registration:
    sleep: 10
    timeout: 600
    signal: "{{ afs_registration_retry_signal | d('no') | bool }}"
  when:
    - afs_is_fileserver

- name: Bootstrap cell
  become: yes
  run_once: yes
  block:
    - name: Ensure administrator user exists
      openafs_contrib.openafs.openafs_user:
        state: present
        user: "{{ item }}"
        groups:
          - system:administrators
        localauth: yes
      with_items: "{{ ((afs_admin | type_debug) == 'list') | ternary(afs_admin, [afs_admin]) }}"

    - name: Ensure root volumes exist
      when: afs_create_root
      openafs_contrib.openafs.openafs_volume:
        state: present
        volume: "{{ item }}"
        localauth: yes
      with_items:
        - root.afs
        - root.cell
